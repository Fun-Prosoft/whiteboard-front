[{"D:\\Users\\doria\\Documents\\GitHub\\whiteboard-front\\whiteboard-front\\src\\index.js":"1","D:\\Users\\doria\\Documents\\GitHub\\whiteboard-front\\whiteboard-front\\src\\reportWebVitals.js":"2","D:\\Users\\doria\\Documents\\GitHub\\whiteboard-front\\whiteboard-front\\src\\App.js":"3","D:\\Users\\doria\\Documents\\GitHub\\whiteboard-front\\whiteboard-front\\src\\hooks\\useCanvas.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":1988,"mtime":1608429429658,"results":"8","hashOfConfig":"6"},{"size":1589,"mtime":1608428882998,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"m4aibd",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"D:\\Users\\doria\\Documents\\GitHub\\whiteboard-front\\whiteboard-front\\src\\index.js",[],["20","21"],"D:\\Users\\doria\\Documents\\GitHub\\whiteboard-front\\whiteboard-front\\src\\reportWebVitals.js",[],"D:\\Users\\doria\\Documents\\GitHub\\whiteboard-front\\whiteboard-front\\src\\App.js",["22"],"D:\\Users\\doria\\Documents\\GitHub\\whiteboard-front\\whiteboard-front\\src\\hooks\\useCanvas.js",["23"],"import React, { useState, useEffect, useRef } from 'react';\r\n\r\n// Path2D for a Heart SVG\r\nconst heartSVG = \"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\"\r\nconst SVG_PATH = new Path2D(heartSVG);\r\n\r\n// Scaling Constants for Canvas\r\nconst SCALE = 0.1;\r\nconst OFFSET = 80;\r\nexport const canvasWidth = window.innerWidth * .5;\r\nexport const canvasHeight = window.innerHeight * .5;\r\n\r\nexport function draw(ctx, location){\r\n  console.log(\"attempting to draw\")\r\n  ctx.fillStyle = 'red';\r\n  ctx.shadowColor = 'blue';\r\n  ctx.shadowBlur = 15;\r\n  ctx.save();\r\n  ctx.scale(SCALE, SCALE);\r\n  ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET);\r\n  ctx.rotate(225 * Math.PI / 180);\r\n  ctx.fill(SVG_PATH);\r\n  // .restore(): Canvas 2D API restores the most recently saved canvas state\r\n  ctx.restore();  \r\n};\r\n\r\nexport function drawLine(ctx, start, end) {\r\n  ctx.beginPath();\r\n  ctx.moveTo(start.x, start.y);\r\n  ctx.lineTo(end.x, end.y);\r\n  ctx.stroke();\r\n}\r\n\r\nexport function useCanvas(){\r\n    const canvasRef = useRef(null);\r\n    const [coordinates, setCoordinates] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const canvasObj = canvasRef.current;\r\n        const ctx = canvasObj.getContext('2d');\r\n\r\n        if (coordinates.length > 1) {\r\n          drawLine(ctx, coordinates[coordinates.length - 2], coordinates[coordinates.length - 1]);\r\n        }\r\n        else {\r\n          ctx.strokeStyle = 'blue';\r\n          ctx.lineWidth = 2;\r\n          ctx.save();\r\n        }\r\n    });\r\n\r\n    return [ coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ];\r\n}",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":37,"column":32,"nodeType":"30","messageId":"31","endLine":37,"endColumn":34},{"ruleId":"32","severity":1,"message":"33","line":1,"column":8,"nodeType":"34","messageId":"35","endLine":1,"endColumn":13},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]